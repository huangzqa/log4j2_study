<?xml version="1.0" encoding="UTF-8" ?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="INFO" monitorInterval="30">
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <!--<File name="log" fileName="log/test.log" append="false">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>
        </File>-->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
<!--        <RollingFile name="RollingFileDebug" fileName="logs/log4j2_study/debug.log"-->
<!--                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log">-->
<!--            <Filters>-->
<!--                &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;-->
<!--                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>-->
<!--                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>-->
<!--            </Filters>-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>-->
<!--            <Policies>-->
<!--                <TimeBasedTriggeringPolicy/>-->
<!--                <SizeBasedTriggeringPolicy size="100 MB"/>-->
<!--            </Policies>-->
<!--        </RollingFile>-->
        <!--大坑记录仪：这里经过多次测试，搞清了其套路，坑爹的博客，基本都是各种扒，根本没有试是否好用-->
        <!-- 这里的日志类似流一样的进入 RollingFileInfo ， 然后经过 ThresholdFilter 进行过滤。
            ps:这里就是坑了，如果ThresholdFilter的顺序不一样的话，输入的结果是不一样的！！！
                因为经过ThresholdFilter的时候，如果有匹配项，则直接打印日志了，所以需要把高等级的日志级别放在前面
                并且，onMatch属性设置为DENY，过滤掉高等级的日志；onMismatch设置为NEUTRAL，把低等级的日志放行，
                到我们想要的级别后，onMache设为ACCEPT，获取到日志，并onMismatch设置为DENY，丢弃低等级日志，并执行结束-->
        <RollingFile name="RollingFileInfo"  fileName="logs/log4j2_study/info.log"
                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
<!--                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>-->
<!--                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
            </Filters>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="1 MB"/>
            </Policies>
        </RollingFile>

<!--        <RollingFile name="RollingFileWarn" fileName="logs/log4j2_study/warn.log"-->
<!--                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">-->
<!--            <Filters>-->
<!--                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>-->
<!--                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>-->
<!--            </Filters>-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>-->
<!--            <Policies>-->
<!--                <TimeBasedTriggeringPolicy/>-->
<!--                <SizeBasedTriggeringPolicy size="100 MB"/>-->
<!--            </Policies>-->
<!--            &lt;!&ndash; DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 &ndash;&gt;-->
<!--            <DefaultRolloverStrategy max="20"/>-->
<!--        </RollingFile>-->

<!--        <RollingFile name="RollingFileError" fileName="logs/log4j2_study/error.log"-->
<!--                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">-->
<!--            <ThresholdFilter level="ERROR"/>-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>-->
<!--            <Policies>-->
<!--                <TimeBasedTriggeringPolicy/>-->
<!--                <SizeBasedTriggeringPolicy size="100 MB"/>-->
<!--            </Policies>-->
<!--        </RollingFile>-->

<!--        <RollingFile name="RollingFileInfoForLog1" fileName="logs/log4j2_study/log1-info.log"-->
<!--                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/log1-info-%d{yyyy-MM-dd}-%i.log">-->
<!--            <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>-->
<!--            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>-->
<!--            <Policies>-->
<!--                <TimeBasedTriggeringPolicy/>-->
<!--                <SizeBasedTriggeringPolicy size="100 MB"/>-->
<!--            </Policies>-->
<!--        </RollingFile>-->

<!--        <RollingFile name="RollingFileInfoForLog2" fileName="logs/log4j2_study/log2-info.log"-->
<!--                     filePattern="logs/log4j2_study/$${date:yyyy-MM}/log2-info-%d{yyyy-MM-dd}-%i.log">-->
<!--            <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>-->
<!--            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %l.%M(): %m%n"/>-->
<!--            <Policies>-->
<!--                <TimeBasedTriggeringPolicy/>-->
<!--                <SizeBasedTriggeringPolicy size="100 MB"/>-->
<!--            </Policies>-->
<!--        </RollingFile>-->

    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="INFO">
        </logger>
        <logger name="org.mybatis" level="INFO">
        </logger>
        <Logger name="com.bycuimiao.demo.log1" level="info" additivity="false">
<!--            <appender-ref ref="Console"/>-->
<!--            <appender-ref ref="RollingFileInfoForLog1"/>-->
        </Logger>
        <Logger name="com.bycuimiao.demo.log2" level="info" additivity="false">
<!--            <appender-ref ref="Console"/>-->
<!--            <appender-ref ref="RollingFileInfoForLog2"/>-->
        </Logger>
        <root level="all">
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="RollingFileDebug"/>-->
            <appender-ref ref="RollingFileInfo"/>
<!--            <appender-ref ref="RollingFileWarn"/>-->
<!--            <appender-ref ref="RollingFileError"/>-->
<!--            <appender-ref ref="File"/>-->
        </root>
    </loggers>
</configuration>
<!--
    pattern属性参数格式描述
    ######### 常见参数 #########
    %c{参数} 或 %logger{参数}    ##输出日志名称
    %C{参数} 或 %class{参数}     ##输出类型
    %d{参数}{时区te{参数}{时区}   ##输出时间
    %F|%file                   ##输出文件名
    highlight{pattern}{style}  ##高亮显示
    %l                         ##输出错误的完整位置
    %L                         ##输出错误行号
    %m 或 %msg 或 %message      ##输出错误信息
    %M 或 %method              ##输出方法名
    %n                         ##输出换行符
    %level{参数1}{参数2}{参数3}  ##输出日志的级别
    %t 或 %thread              ##创建logging事件的线程名

    ######### 特殊符号 ############
    #有些特殊符号不能直接打印，需要使用实体名称或者编号
    & —— &amp; 或者 &#38;
    < —— &lt;  或者 &#60;
    > —— &gt;  或者 &#62;
    “ —— &quot; 或者 &#34;
    ‘ —— &apos; 或者 &#39;

    ######## pattern对齐修饰 ##########
    // 对齐修饰，可以指定信息的输出格式，如是否左对齐，是否留空格等。
    ## 编写格式为在任何pattern和%之间加入一个小数，可以是正数，也可以是负数。
    ## 整数表示右对齐，负数表示左对齐；
    ## 整数位表示输出信息的最小n个字符，如果输出信息不够n个字符，将用空格补齐；
    ## 小数位表示输出信息的最大字符数，如果超过n个字符，则只保留最后n个字符的信息
    ## （注意：保留的是后20个字符，而不是前20个字符）

    #示例如下
    %20 —— 右对齐，不足20个字符则在信息前面用空格补足，超过20个字符则保留原信息
    %-20 —— 左对齐，不足20个字符则在信息后面用空格补足，超过20个字符则保留原信息
    %.30 —— 如果信息超过30个字符，则只保留最后30个字符
    %20.30 —— 右对齐，不足20个字符则在信息前面用空格补足，超过30个字符则只保留最后30个字符
    %-20.30 —— 左对齐，不足20个字符则在信息后面用空格补足，超过30个字符则只保留最后30个字符
-->